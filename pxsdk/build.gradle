apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    bintrayRepo = 'pixalate-android-sdk'
    bintrayName = 'pxsdk'
    userOrg = 'pixalate'

    publishedGroupId = 'com.pixalate.pxsdk'
    libraryName = 'pxsdk'
    artifact = 'pxsdk'

    libraryDescription = 'Pixalate SDK for easy integration in Android apps.'

    siteUrl = 'https://github.com/Madgvox/pxsdk-temp'
    gitUrl = 'https://github.com/Madgvox/pxsdk-temp.git'
    githubRepository= 'Madgvox/pxsdk-temp'

    libraryVersion = '0.2.1'

    developerId = 'pixalate'
    developerName = 'Nate Tessman'
    developerEmail = 'nate@pixalate.com'

    licenseName = 'The Apache Software License, Version 2.0' // tbd
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName libraryVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
}

// from https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle
// inlined due to lack of userOrg field
version = libraryVersion

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
def propertiesFile = project.rootProject.file( 'local.properties' )

def bintrayEnvUser = System.getenv( 'BINTRAY_USER' )
def bintrayEnvKey  = System.getenv( 'BINTRAY_API_KEY' )

def bintrayLocalUser
def bintrayLocalKey
def bintrayGPG
if( propertiesFile.exists() ) {
    properties.load( propertiesFile.newDataInputStream() )
    bintrayLocalUser = properties.getProperty( "bintray.user" )
    bintrayLocalKey  = properties.getProperty( "bintray.apikey" )
    bintrayGPG       = properties.getProperty( "bintray.gpg.password" )
}

ext.bintrayUser = bintrayLocalUser != null ? bintrayLocalUser : bintrayEnvUser
ext.bintrayKey  = bintrayLocalKey  != null ? bintrayLocalKey  : bintrayEnvKey

if( ext.bintrayUser == null || ext.bintrayKey == null ) throw new InvalidUserDataException( 'No variable defined' )

bintray {
    user = bintrayUser
    key  = bintrayKey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = publishedGroupId
        userOrg = 'pixalate' // @bug: for some reason I can't get away with using the ext variable here
        desc = libraryDescription
        licenses = allLicenses
        vcsUrl = gitUrl
        publish = true
//        websiteUrl = siteUrl
//        githubRepo = githubRepository //Optional Github repository
//        githubReleaseNotesFile = 'README.md' //Optional Github readme file
//        publicDownloadNumbers = false
        version {
            name = libraryVersion
            desc = libraryDescription
            gpg {
                sign = bintrayGPG != null ? true : false //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayGPG
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

// from https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle
// inlined for consistency
group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
